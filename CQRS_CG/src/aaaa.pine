
//@version=5
indicator(title="hadi_TCP", shorttitle="hadi_TCP", overlay=true,max_labels_count=500)
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Displacement")
s01 = input.string('XRPUSDT' ,group = "Symbols")
s02 = input.string('BTCUSDT' ,group = "Symbols")
s03 = input.string('DOGEUSDT' ,group = "Symbols")
s04 = input.string('BNBUSDT' ,group = "Symbols")
s05 = input.string('ETHUSDT' ,group = "Symbols")
s06 = input.string('ADAUSDT' ,group = "Symbols")
s07 = input.string('BAKEUSDT' ,group = "Symbols")
s08 = input.string('SOLUSDT' ,group = "Symbols")
s09 = input.string('GTCUSDT' ,group = "Symbols")
s10 = input.string('ALGOUSDT' ,group = "Symbols")
s11 = input.string('FLMUSDT' ,group = "Symbols")
s12 = input.string('ICPUSDT' ,group = "Symbols")
s13 = input.string('VETUSDT' ,group = "Symbols")
s14 = input.string('1INCHUSDT' ,group = "Symbols")
s15 = input.string('TRXUSDT' ,group = "Symbols")
s16 = input.string('THETAUSDT' ,group = "Symbols")
s17 = input.string('EGLDUSDT' ,group = "Symbols")
s18 = input.string('LTCUSDT' ,group = "Symbols")
s19 = input.string('UNIUSDT' ,group = "Symbols")
s20 = input.string('SUSHIUSDT' ,group = "Symbols")
s21 = input.string('DOTUSDT' ,group = "Symbols")
s22 = input.string('XTZUSDT' ,group = "Symbols")
s23 = input.string('RENUSDT' ,group = "Symbols")
s24 = input.string('LINKUSDT' ,group = "Symbols")
s25 = input.string('FILUSDT' ,group = "Symbols")
s26 = input.string('KSMUSDT' ,group = "Symbols")
s27 = input.string('LUNAUSDT' ,group = "Symbols")
s28 = input.string('FTMUSDT' ,group = "Symbols")
s29 = input.string('AXSUSDT' ,group = "Symbols")
s30 = input.string('SANDUSDT' ,group = "Symbols")
s31 = input.string('ALICEUSDT' ,group = "Symbols")
s32 = input.string('COTIUSDT' ,group = "Symbols")
s33 = input.string('CHRUSDT' ,group = "Symbols")
s34 = input.string('LINAUSDT' ,group = "Symbols")
s35 = input.string('CHZUSDT' ,group = "Symbols")
s36 = input.string('DODOUSDT' ,group = "Symbols")
s37 = input.string('MATICUSDT' ,group = "Symbols")
s38 = input.string('EOSUSDT' ,group = "Symbols")
s39 = input.string('ROSEUSDT' ,group = "Symbols")
s40 = input.string('TOMOUSDT' ,group = "Symbols")

Ichi ()=>
    conversionLine = math.avg(ta.lowest(conversionPeriods), ta.highest(conversionPeriods))
    baseLine = math.avg(ta.lowest(basePeriods), ta.highest(basePeriods))
    leadLine1 = math.avg(conversionLine, baseLine)
    leadLine2 = math.avg(ta.lowest(laggingSpan2Periods), ta.highest(laggingSpan2Periods))
    signal=false
    signall=false
    condition=baseLine>leadLine2[displacement - 1] and close>baseLine
    conditionn=baseLine<leadLine2[displacement - 1] and close<baseLine    
    if condition and not condition[1]
        signal :=true
    if conditionn and not conditionn[1] 
        signall :=true
    [conversionLine,baseLine,leadLine1,leadLine2,signal, signall]
var float myLow = na
var float myHigh = na
var float lowGhabli = na
var float highGhabli = na
var isBullish = true
var isBearish = false
ALARM(symbol , timeframe) =>
    [_,_,_,_,signal2,signall3]=request.security(symbol,timeframe,Ichi () )
    if signal2 or signall3
        alert(symbol , alert.freq_once_per_bar_close)
baseLline = math.avg(ta.lowest(conversionPeriods), ta.highest(conversionPeriods))
[conversionLine,baseLine,leadLine1,leadLine2,signal,signall]=Ichi() 
if signal
    label.new(bar_index,low,style=label.style_label_up)
if signall
    label.new(bar_index,high, color = color.red , style=label.style_label_down)

plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A")
p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B")
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

ALARM (s01 , ""),ALARM (s02 , ""),ALARM (s03 , ""),ALARM (s04 , ""),ALARM (s05 , "")
ALARM (s06 , ""),ALARM (s07 , ""),ALARM (s08 , ""),ALARM (s09 , ""),ALARM (s10 , "")
ALARM (s11 , ""),ALARM (s12 , ""),ALARM (s13 , ""),ALARM (s14 , ""),ALARM (s15 , "")
ALARM (s16 , ""),ALARM (s17 , ""),ALARM (s18 , ""),ALARM (s19 , ""),ALARM (s20 , "")
ALARM (s21 , ""),ALARM (s22 , ""),ALARM (s23 , ""),ALARM (s24 , ""),ALARM (s25 , "")
ALARM (s26 , ""),ALARM (s27 , ""),ALARM (s28 , ""),ALARM (s29 , ""),ALARM (s30 , "")
ALARM (s31 , ""),ALARM (s32 , ""),ALARM (s33 , ""),ALARM (s34 , ""),ALARM (s35 , "")
ALARM (s36 , ""),ALARM (s37 , ""),ALARM (s38 , ""),ALARM (s39 , ""),ALARM (s40 , "")
